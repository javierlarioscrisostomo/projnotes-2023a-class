# Updating to ES6

## introduction 
In this step, what was done was to update our repository to ES6, putting the new code for 
the old code and changing some structure of the code with the help of professor rivalcoba, 
the structure was changed in the same way, the declarations of the variables and some methods 
and functions

ECMAScript, or ES, is a standardized version of JavaScript. Because all major browsers follow 
this specification, the terms ECMAScript and JavaScript are interchangeable.
Most of the JavaScript you've learned up to this point was in ES5 (ECMAScript 5), which was finalized in 2009.
 While you can still write programs in ES5, JavaScript is constantly evolving, and new features are released every year.
ES6, released in 2015, added many powerful new features to the language. In this course, you'll learn these new features,
 including arrow functions, destructuring, classes, promises, and modules.



##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Methods>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TODO:  the first thing that was done in this activity was that all the variables were updated,The first thing that was
 done was to change the variables for the new declarations and variables that ES6 provides us when a variable is declared with 
 the var that is a keyword, it is declared globally or locally if it is declared inside a function, this was the that we were 
 taught in the ES6 course



In the same way we saw what let means, know that it is a keyword, it behaves in a similar  way  but  with  some  additional 
 characteristics,  but  when  a  variable  is declared with the let its scope is limited to that block.

Before changing something else in our code, what we did first was change all the vars for the import ones, this is because it 
is an update of es6 since apparently var should not exist in the code


In  the  same  way,  concise  declarative  functions,  it  is  known  that  when  defining functions within objects in ES5, 
keywords such as function must be used.but as e told us in es6 you can eliminate the function that is a keyword and that the
colon when defining functions in objects the function is refactored inside an object and  as  it  was  said  in  the  course 
you  should  no  longer  use  the  expression  of traditional function

what  we  did  anyway  was  good  remembering  the  class  of  using  a  destructuring assignment to pass an object as a 
parameter to a functionWe saw that in some cases the object can be destructured in a function argument itself.when  profile 
data  is  passed  to  the  previous  function,  the  values are  unstructured from  the  function  parameter  for  use  within 
the  function  and  what  we  did  in  the structure  change  was  to  change  the  functions  as  they  were  before  to  the
new conditions of the updated structure es6


What was done was to follow the professor in his code. We updated our old code and put the new one as explained above on how we changed the variables and functions.

The same was done with the professor, the rpofesor rivalcoba started changing in app.js
we had var createerror = require('http-errors') and that was changed by import createError from 'http-errors' which changes 
the structure of the code a bit in this part because let's remember that it helped to handle HTTP errors

well we continue and what keeps changing was where the express library is imported for example
var express = require('express'); that was changed by this new syntax which is import express from 'express';
 then where is the core-node library to manage the system paths was changed var route = require ('route'); by
 import route from 'route' in the same way as where it helps to analyze client cookies, change this
 var cookieParser = require('cookie-parser'); so import cookieParser from 'cookie-parser' ; and in the library
 to log the http communication, change var logger = require('morgan'); by importing logger from 'morgan'
  where the structure of our code was also changed so that according to es6 it is easier is
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var apiRouter = require('./routes/api');
It was changed by import and in some small symbols like the ()
import indexRouter from './routes/index'
import routerusers from './routes/users' ;
import apiRouter from './routes/api';

where the express instance was created, var app = express ( ) was changed to the following way: const app = express ( );
changed where the engine configuration is seen and where the location of the views is declared application _ use ( '/api' , apiRouter ) ;
this is added

also where is the 404 trap and error handlers are forwarded was updated to application _ use ( ( req , res , next ) => {
Finally, the error handler where some lines were added just like application _ use ( ( err , req , res , next ) => { why was it like this
app _ use ( function ( err , req , res , next ) {
those were some changes that were made in application.js
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
on the www.js page where the server logic is imported to import code from an external file, change var application = require ( '../application' ) ;
by importing app from '../app' ; and where the dependencies are imported, a change of variables was made as var debug = require ( 'debug' ) ( 'projnotes' ) ;
by importing debug from 'debug' ; const debug = Debug ( 'projnotas' ) and what was done in the module that allows to communicate with a client and also uses the
http protocol the variables were changed as they are var http = require ( 'http' ) ; import http from 'http' ;

to obtain the environment port and express storage, the variable change was made var port = normalizePort ( process . env . PORT || '3000' ) ;
const port = normalizePort ( process . env . PORT || '3000' ) ;

where we created the http server, some function variables were changed the same as here var server = http. createServer ( application ) ; // (req, res) => { actions }
 constant server = http . createServer ( application ) ; // (req, res) => { actions }

 where specific listener errors are handled with friendly messages changed to the same syntax as console _ error ( bind + ' requires elevated privileges ' ) ; this for this
      console _ error ( ` $ { bind } requires elevated privileges` ) ;

      and finally where is the listen function, the syntax was changed the same as for example
    var address = server . address ( ) ;
    var bind = typeof addr === 'string'
    ? 'pipe' + address
    : ' port ' + address . port ;
   
   constant address = server . address ( ) ;
   const bind = typeof addr === 'string'
    ? ` pipe ${ address } `
    : ` port ${ address . port } ` ;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
in the api.js the same syntax changes were made where the import of the express library is, for example, it was changed
var express = require ( ' express ' ) ;
// Create a router instance
var router = express . router();
because of the new syntax which is //////
import express from 'express' ;
const { Router } = express ;
const router = router ( ) ;
 
 In the same way, where you are exporting with the router, change module _ exports = router; by
export default router ;
--------------------------------------------------------------------------------------------------------------------------------
in the case of index.js the same syntax was changed as it was var express = require ( 'express' ) ;
var router = express . router(); because of the new syntax that is this
import express from 'express' ;
const { Router } = express ;

const router = router ( ) ;

where the home page is obtained, the change of function was made by the little arrows, for example
router _ get ( '/' , function ( req , res , next ) { for the example below
router _ get( '/' , ( req , res , next ) => {
----------------------------------------------------------------------------------------------------------------------------
in users.js several vars were changed to import or const the example is below
var express = require ( 'express' ) ;
var router = express . router();
the change to new code is
import express from 'express' ;
const { Router } = express ;

const router = router ( ) ;

router _ get( '/' , function ( req , res , next ) {
change
router _ get( '/' , ( req , res , next ) => {
  res . send( 'respond with a resource' ) ;
} ) ;

module _ exports = router ;
change
export default router ;

##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<RESULTS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

TODO: ES6  introduces  important  JavaScript  syntax  improvements  which  make  the  code easier  to  read  and  maintain.  Also,  as  the  support  for 
browsers  is  extensive,  you can use it in most of your projects natively.ES6,  also  known  as  ECMAScript  2015  or  simply  "Harmony"  is  one  of  
the  most important  standards.  Given  its  importance,  browser  support  quickly  grew  from Edge  and  Safari  to  Chrome,  Firefox  and  Opera  and 
is  now  supported  by  all browsers


## DISCUSSIONS 
TODO: ES6 or ECMAScript 6 is a scripting language standard developed in accordance with the indications contained in the ECMA-262 document provided by Ecma International (European Computer Manufacturers Association). Ecma international is an association founded in 1961 that deals with standardization in the information technology and communication systems sector.

ECMAScript is, therefore, a standard created with the aim of allowing the interoperability of different web pages between different browsers. The language standard specifies the features that a scripting language should have and how they should be implemented.

Examples of languages ​​that have been implemented from ECMAScript are Javascript, ActionScript, and Jscript (Microsoft), now very popular as scripting languages ​​for the client-side of web development.
## referencias 
TODO: https://github.com/rivalcoba/projnotes-2023a-class/commit/5425772d56effdf4e0ef9945da231b58e0591ebf#diff-d347091b60673886a3f7f9f7eaf7e970812f0fc22217d00b234df8266f46199d

